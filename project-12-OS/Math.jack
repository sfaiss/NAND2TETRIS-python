// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, n;
        let twoToThe = Array.new(16);
        let i = 0;
        let n = 1;
        while (i < 16) {
            let twoToThe[i] = n;
            let i = i + 1;
            let n = n + n;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, xShifted, i;
        let sum = 0;
        let xShifted = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i) = 1) {
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, sign;

        if (y = 0) {
            do Sys.error(3);  // Division by zero
        }

        let sign = Math.sign(x) * Math.sign(y);
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x | y < 0) {
            return 0;
        }

        let q = Math.divide(x, y * 2);

        if ((x - (2 * q * y)) < y) {
            return sign * 2 * q;
        }
        else {
            return sign * 2 * q + 1;
        }
        return 0;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int k, i, y;

        if (x < 0) {
            do Sys.error(4);  // Cannot compute square root of a negative number
        }

        let y = 0;
        let i = 7;  // (16 / 2 - 1) = 7

        while ((i > 0) | (i = 0)) {
            let k = Math.multiply(y + twoToThe[i], y + twoToThe[i]);
            if ((k < x) | (k = x) & (k > 0)) {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the value of the i-th bit of x. */
    function int bit(int x, int i) {
        if (x & twoToThe[i] = 0) {
            return 0;
        }
        return 1;
    }

    /** Returns the sign of x. */
    function int sign(int x) {
        if (x > 0) {
            return 1;
        }
        if (x < 0) {
            return -1;
        }
        return 0;
    }
}
